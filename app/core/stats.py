# app/core/stats.py

from datetime import datetime, timezone

import aiosqlite

from app.core.memory import CHAT_HISTORY_DB_PATH


async def _create_table_if_not_exists() -> None:
    """
    Asynchronously creates the 'query_stats' table if it doesn't exist.
    This table is designed to store statistics about user queries.
    """
    async with aiosqlite.connect(CHAT_HISTORY_DB_PATH) as db:
        await db.execute(
            """
            CREATE TABLE IF NOT EXISTS query_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                query_text TEXT NOT NULL,
                retrieved_context TEXT,
                llm_response TEXT,
                timestamp DATETIME NOT NULL
            );
            """
        )
        await db.commit()


async def log_query(
    user_id: int,
    username: str | None,
    first_name: str | None,
    last_name: str | None,
    query_text: str,
    retrieved_context: str,
    llm_response: str,
) -> None:
    """
    Asynchronously logs the details of a user's query to the database.

    Args:
        user_id: The Telegram user ID.
        username: The Telegram username (can be None).
        first_name: The user's first name (can be None).
        last_name: The user's last name (can be None).
        query_text: The text of the user's query.
        retrieved_context: The context retrieved from the RAG system.
        llm_response: The final response generated by the LLM.
    """
    await _create_table_if_not_exists()

    async with aiosqlite.connect(CHAT_HISTORY_DB_PATH) as db:
        await db.execute(
            """
            INSERT INTO query_stats (
                user_id, username, first_name, last_name, query_text,
                retrieved_context, llm_response, timestamp
            )
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """,
            (
                user_id,
                username,
                first_name,
                last_name,
                query_text,
                retrieved_context,
                llm_response,
                datetime.now(timezone.utc),
            ),
        )
        await db.commit()